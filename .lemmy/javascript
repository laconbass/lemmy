APP_JS = "var express = require('express');"

ifeq "$(APP_TYPE)" "MODULAR"
APP_JS += "\n//var subapp = require('$(APPS_DIRECTORY)/subapp/app');"
endif

APP_JS += "\n\nvar app = express.createServer();\
\n\napp.configure(function() {"

ifneq "$(APP_ENGINE)" ""
APP_JS += "\n\tapp.set('views', __dirname + '/views');"
endif

ifeq "$(APP_ENGINE)" "EJS"
APP_JS += "\n\tapp.set('view engine', 'ejs');"
else
ifeq "$(APP_ENGINE)" "JADE"
APP_JS += "\n\tapp.set('view engine', 'jade');"
endif
endif

APP_JS += "\n\tapp.use(express.logger());\
\n\tapp.use(express.methodOverride());\
\n\tapp.use(express.bodyParser());\
\n\t//app.use(express.router);"

ifneq "$(APP_ENGINE)" ""
APP_JS += "\n\t//app.use(express.static(__dirname + '/public'));"
endif

APP_JS += "\n});\
\n\napp.configure('development', function() {\
\n\tapp.use(express.errorHandler({\
\n\t\tdumpExceptions: true,\
\n\t\tshowStack: true\
\n\t}));\
\n});\
\n\napp.configure('production', function() {\
\n\tapp.use(express.errorHandler());\
\n});"

ifeq "$(APP_TYPE)" "MODULAR"
APP_JS += "\n\n//app.use('/subapp', subapp);"
endif

APP_JS += "\n\napp.listen(3000);"

SUBAPP_JS = "var express = require('express');\
\n\nvar app = module.exports = express.createServer();\
\n\napp.configure(function() {"

ifneq "$($(NAME_UPPERCASED)_ENGINE)" ""
SUBAPP_JS += "\n\t//app.set('views', __dirname + '/views/$(APPS_DIRECTORY)/$(NAME_CAMELIZED)');"
endif

ifeq "$($(NAME_UPPERCASED)_ENGINE)" "EJS"
SUBAPP_JS += "\n\tapp.set('view engine', 'ejs');"
else
ifeq "$($(NAME_UPPERCASED)_ENGINE)" "JADE"
SUBAPP_JS += "\n\tapp.set('view engine', 'jade');"
endif
endif

SUBAPP_JS += "\n\t//app.use(express.router);"

ifneq "$($(NAME_UPPERCASED)_ENGINE)" ""
SUBAPP_JS += "\n\tapp.use(express.static(__dirname + '/public'));"
endif

SUBAPP_JS += "\n});\
\n\napp.get('/?', function(request, response) {\
\n\t// ... your code goes in here ...\
\n});"

TESTSUBAPP_JS = "describe('App > $(NAME)', function() {\
\n\tvar $(NAME_CAMELIZED) = require('../../../$(APPS_DIRECTORY)/$(NAME_CAMELIZED)/app');\
\n\tvar app = require('express').createServer();\
\n\tvar http = require('http');\
\n\n\tvar options = {\
\n\t\thost: 'localhost',\
\n\t\tport: 3000,\
\n\t\tpath: '/$(NAME_CAMELIZED)',\
\n\t\tmethod: 'GET'\
\n\t};\
\n\n\tapp.use('/$(NAME_CAMELIZED)', $(NAME_CAMELIZED));\
\n\tapp.listen(3000);\
\n\n\tdescribe('\'/$(NAME_CAMELIZED)/\' route', function() {\
\n\t\tit('should exist.', function(done) {\
\n\t\t\thttp.request(options, function(response) {\
\n\t\t\t\tapp.stack[1].route.should.eql('/$(NAME_CAMELIZED)');\
\n\t\t\t\tapp.stack[1].handle.should.be.a('function');\
\n\t\t\t\tresponse.statusCode.should.eql(200);\
\n\t\t\t\tdone();\
\n\t\t\t});\
\n\t\t});\
\n\t});\
\n});"

MIDDLEWARE_JS = "//var example = require('example');\
\n\nmodule.exports = function $(NAME_FUNCTIONALIZED)(request, response, next) {\
\n\tvar app = request.app;\
\n\n\t// ... your code goes in here ...\
\n\n\tnext();\
\n};"

ifeq "$(APP)" ""
TESTMIDDLEWARE_JS = "describe('$(NAME)', function(){\
\n\tvar $(NAME_FUNCTIONALIZED) = require('../../$(MIDDLEWARES_DIRECTORY)/$(NAME_CAMELIZED)');"
else
TESTMIDDLEWARE_JS = "describe('$(APP) > $(NAME)', function(){\
\n\tvar $(NAME_FUNCTIONALIZED) = require('../../../../$(APPS_DIRECTORY)/$(APP_CAMELIZED)/$(MIDDLEWARES_DIRECTORY)/$(NAME_CAMELIZED)');"
endif

TESTMIDDLEWARE_JS += "\n\tvar app = require('express').createServer();\
\n\tvar http = require('http');\
\n\n\tapp.configure(function(){\
\n\t\tapp.use($(NAME_FUNCTIONALIZED));\
\n\t});\
\n\n\tapp.get('/', function(request, response){\
\n\t\tresponse.end();\
\n\t});\
\n\n\tapp.listen(3000);\
\n\n\tit('should exist', function(done){\
\n\t\tvar options = {\
\n\t\t\thost: 'localhost',\
\n\t\t\tport : 3000,\
\n\t\t\tpath: '/'\
\n\t\t};\
\n\n\t\thttp.get(options, function(response){\
\n\t\t\tapp.stack[1]['handle'].name.should.eql($(NAME_FUNCTIONALIZED).name);\
\n\t\t\tdone();\
\n\t\t});\
\n\t});\
\n});"

MODULE_JS = "module.exports = {\
\n\t//var example = 0;\
\n\n\tmethod1: function(){\
\n\t\t// ... your code goes in here ...\
\n\t},\
\n\tmethod2: function(){\
\n\t\t// ... your code goes in here ...\
\n\t}\
\n};"

ifeq "$(APP)" ""
TESTMODULE_JS = "describe('$(NAME)', function(){\
\n\tvar $(NAME_CAMELIZED) = require('../../$(MODULES_DIRECTORY)/$(NAME_CAMELIZED)');"
else
TESTMODULE_JS = "describe('$(APP) > $(NAME)', function(){\
\n\tvar $(NAME_CAMELIZED) = require('../../../../$(APPS_DIRECTORY)/$(APP_CAMELIZED)/$(MODULES_DIRECTORY)/$(NAME_CAMELIZED)');"
endif

TESTMODULE_JS += "\n\n\tdescribe('\#example', function(){\
\n\t\tit('should not exist', function(done){\
\n\t\t\t$(NAME_CAMELIZED).should.not.have.property('example');\
\n\t\t\tdone();\
\n\t\t});\
\n\t});\
\n\n\tdescribe('\#method1()', function(){\
\n\t\tit('should exist.', function(done){\
\n\t\t\t$(NAME_CAMELIZED).should.have.property('method1');\
\n\t\t\tdone();\
\n\t\t});\
\n\t});\
\n\n\tdescribe('\#method2()', function(){\
\n\t\tit('should exist.', function(done){\
\n\t\t\t$(NAME_CAMELIZED).should.have.property('method2');\
\n\t\t\tdone();\
\n\t\t});\
\n\t});\
\n})"

ROUTE_JS = "//var example = require('example');\
\n\nmodule.exports = function(app){\
\n\tapp.all('/$(NAME_CAMELIZED)(/*)?', function(request, response, next){\
\n\t\t// ... your code goes in here ...\
\n\t\t// var options = {\
\n\t\t//\t layout: 'layout',\
\n\t\t//\t locals: {\
\n\t\t//\t\t foo: 'bar'\
\n\t\t//\t }\
\n\t\t// };\
\n\t\t// response.render('group/view', options);\
\n\t});\
\n\tapp.get('/$(NAME_CAMELIZED)', function(request, response, next){\
\n\t\t// ... your code goes in here ...\
\n\t\t// var options = {\
\n\t\t//\t layout: 'layout',\
\n\t\t//\t locals: {\
\n\t\t//\t\t foo: 'bar'\
\n\t\t//\t }\
\n\t\t// };\
\n\t\t// response.render('group/view', options);\
\n\t});\
\n\tapp.post('/$(NAME_CAMELIZED)', function(request, response, next){\
\n\t\t// ... your code goes in here ...\
\n\t\t// var options = {\
\n\t\t//\t layout: 'layout',\
\n\t\t//\t locals: {\
\n\t\t//\t\t foo: 'bar'\
\n\t\t//\t }\
\n\t\t// };\
\n\t\t// response.render('group/view', options);\
\n\t});\
\n\tapp.put('/$(NAME_CAMELIZED)', function(request, response, next){\
\n\t\t// ... your code goes in here ...\
\n\t\t// var options = {\
\n\t\t//\t layout: 'layout',\
\n\t\t//\t locals: {\
\n\t\t//\t\t foo: 'bar'\
\n\t\t//\t }\
\n\t\t// };\
\n\t\t// response.render('group/view', options);\
\n\t});\
\n\tapp.del('/$(NAME_CAMELIZED)', function(request, response, next){\
\n\t\t// ... your code goes in here ...\
\n\t\t// var options = {\
\n\t\t//\t layout: 'layout',\
\n\t\t//\t locals: {\
\n\t\t//\t\t foo: 'bar'\
\n\t\t//\t }\
\n\t\t// };\
\n\t\t// response.render('group/view', options);\
\n\t});\
\n};"

ifeq "$(APP)" ""
TESTROUTE_JS = "describe('$(NAME)', function(){\
\n\tvar app = require('express').createServer();\
\n\tvar http = require('http');\
\n\n\trequire('../../$(ROUTES_DIRECTORY)/$(NAME_CAMELIZED)')(app);"
else
TESTROUTE_JS = "describe('$(APP) > $(NAME)', function(){\
\n\tvar app = require('express').createServer();\
\n\tvar http = require('http');\
\n\n\trequire('../../../../$(APPS_DIRECTORY)/$(APP_CAMELIZED)/$(ROUTES_DIRECTORY)/$(NAME_CAMELIZED)')(app);"
endif

TESTROUTE_JS += "\n\n\tapp.listen(3000);\
\n\n\tdescribe('\#get()', function(){\
\n\t\tit('\'/$(NAME_CAMELIZED)\' route should exist', function(done){\
\n\t\t\tvar options = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/$(NAME_CAMELIZED)',\
\n\t\t\t\tmethod: 'GET'\
\n\t\t\t};\
\n\n\t\t\thttp.request(options, function(response){\
\n\t\t\t\tresponse.statusCode.should.eql(200);\
\n\t\t\t\tdone();\
\n\t\t\t});\
\n\t\t});\
\n\n\t\tit('\'/$(NAME_CAMELIZED)/xxx/\' route should exist', function(done){\
\n\t\t\tvar options = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/$(NAME_CAMELIZED)/xxx/',\
\n\t\t\t\tmethod: 'GET'\
\n\t\t\t};\
\n\n\t\t\thttp.request(options, function(response){\
\n\t\t\t\tresponse.statusCode.should.eql(200);\
\n\t\t\t\tdone();\
\n\t\t\t});\
\n\t\t});\
\n\n\t\tit('\'/testing\' route should exist', function(done){\
\n\t\t\tvar options = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/testing',\
\n\t\t\t\tmethod: 'GET'\
\n\t\t\t};\
\n\n\t\t\thttp.request(options, function(response){\
\n\t\t\t\tresponse.statusCode.should.eql(200);\
\n\t\t\t\tdone();\
\n\t\t\t});\
\n\t\t});\
\n\t});\
\n\n\tdescribe('\#post()', function(){\
\n\t\tit('\'/$(NAME_CAMELIZED)\' route should exist', function(done){\
\n\t\t\tvar options = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/$(NAME_CAMELIZED)',\
\n\t\t\t\tmethod: 'POST'\
\n\t\t\t};\
\n\n\t\t\thttp.request(options, function(response){\
\n\t\t\t\tresponse.statusCode.should.eql(200);\
\n\t\t\t\tdone();\
\n\t\t\t});\
\n\t\t});\
\n\n\t\tit('\'/$(NAME_CAMELIZED)/xxx/\' route should exist', function(done){\
\n\t\t\tvar options = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/$(NAME_CAMELIZED)/xxx/',\
\n\t\t\t\tmethod: 'POST'\
\n\t\t\t};\
\n\n\t\t\thttp.request(options, function(response){\
\n\t\t\t\tresponse.statusCode.should.eql(200);\
\n\t\t\t\tdone();\
\n\t\t\t});\
\n\t\t});\
\n\n\t\tit('\'/testing\' route should exist', function(done){\
\n\t\t\tvar options = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/testing',\
\n\t\t\t\tmethod: 'POST'\
\n\t\t\t};\
\n\n\t\t\thttp.request(options, function(response){\
\n\t\t\t\tresponse.statusCode.should.eql(200);\
\n\t\t\t\tdone();\
\n\t\t\t});\
\n\t\t});\
\n\t});\
\n\n\tdescribe('\#put()', function(){\
\n\t\tit('\'/$(NAME_CAMELIZED)\' route should exist', function(done){\
\n\t\t\tvar options = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/$(NAME_CAMELIZED)',\
\n\t\t\t\tmethod: 'PUT'\
\n\t\t\t};\
\n\n\t\t\thttp.request(options, function(response){\
\n\t\t\t\tresponse.statusCode.should.eql(200);\
\n\t\t\t\tdone();\
\n\t\t\t});\
\n\t\t});\
\n\n\t\tit('\'/$(NAME_CAMELIZED)/xxx/\' route should exist', function(done){\
\n\t\t\tvar options = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/$(NAME_CAMELIZED)/xxx/',\
\n\t\t\t\tmethod: 'PUT'\
\n\t\t\t};\
\n\n\t\t\thttp.request(options, function(response){\
\n\t\t\t\tresponse.statusCode.should.eql(200);\
\n\t\t\t\tdone();\
\n\t\t\t});\
\n\t\t});\
\n\n\t\tit('\'/testing\' route should exist', function(done){\
\n\t\t\tvar options = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/testing',\
\n\t\t\t\tmethod: 'PUT'\
\n\t\t\t};\
\n\n\t\t\thttp.request(options, function(response) {\
\n\t\t\t\tresponse.statusCode.should.eql(200);\
\n\t\t\t\tdone();\
\n\t\t\t});\
\n\t\t});\
\n\t});\
\n\n\tdescribe('\#del()', function() {\
\n\t\tit('\'/$(NAME_CAMELIZED)\' route should exist', function(done){\
\n\t\t\tvar options = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/$(NAME_CAMELIZED)',\
\n\t\t\t\tmethod: 'DELETE'\
\n\t\t\t};\
\n\n\t\t\thttp.request(options, function(response) {\
\n\t\t\t\tresponse.statusCode.should.eql(200);\
\n\t\t\t\tdone();\
\n\t\t\t});\
\n\t\t});\
\n\n\t\tit('\'/$(NAME_CAMELIZED)/xxx/\' route should exist', function(){\
\n\t\t\tvar options = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/$(NAME_CAMELIZED)/xxx/',\
\n\t\t\t\tmethod: 'DELETE'\
\n\t\t\t};\
\n\n\t\t\thttp.request(options, function(response) {\
\n\t\t\t\tresponse.statusCode.should.eql(200);\
\n\t\t\t\tdone();\
\n\t\t\t});\
\n\t\t});\
\n\n\t\tit('\'/testing\' route should exist', function(done){\
\n\t\t\tvar options = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/testing',\
\n\t\t\t\tmethod: 'DELETE'\
\n\t\t\t};\
\n\n\t\t\thttp.request(options, function(response){\
\n\t\t\t\tresponse.statusCode.should.eql(200);\
\n\t\t\t\tdone();\
\n\t\t\t});\
\n\t\t});\
\n\t});\
\n});"

CONTROLLER_JS = "//var Example = require('example');\
\n\nvar $(NAME) = exports = module.exports = function(){\
\n\t//var model = new Example();"

ifeq "$(WITH_VIEWS)" "YES"
CONTROLLER_JS += "\n\n\tfunction index(request, response){\
\n\t\t// ... your code goes in here ...\
\n\n\t\tvar options = {\
\n\t\t\tlayout: 'layout',\
\n\t\t\tlocals: {\
\n\t\t\t\tfoo: 'bar'\
\n\t\t\t}\
\n\t\t};\
\n\n\t\tresponse.render('$(GROUP_CAMELIZED)/index', options);\
\n\t}\
\n\n\tfunction show(request, response){\
\n\t\t// ... your code goes in here ...\
\n\n\t\tvar options = {\
\n\t\t\tlayout: 'layout',\
\n\t\t\tlocals: {\
\n\t\t\t\tfoo: 'bar'\
\n\t\t\t}\
\n\t\t};\
\n\n\t\tresponse.render('$(GROUP_CAMELIZED)/show', options);\
\n\t}\
\n\n\tfunction edit(request, response){\
\n\t\t// ... your code goes in here ...\
\n\n\t\tvar options = {\
\n\t\t\tlayout: 'layout',\
\n\t\t\tlocals: {\
\n\t\t\t\tfoo: 'bar'\
\n\t\t\t}\
\n\t\t};\
\n\n\t\tresponse.render('$(GROUP_CAMELIZED)/edit', options);\
\n\t}\
\n\n\tfunction update(request, response){\
\n\t\t// ... your code goes in here ...\
\n\n\t\tvar options = {\
\n\t\t\tlayout: 'layout',\
\n\t\t\tlocals: {\
\n\t\t\t\tfoo: 'bar'\
\n\t\t\t}\
\n\t\t};\
\n\n\t\tresponse.render('$(GROUP_CAMELIZED)/update', options);\
\n\t}\
\n\n\tfunction remove(request, response){\
\n\t\t// ... your code goes in here ...\
\n\n\t\tvar options = {\
\n\t\t\tlayout: 'layout',\
\n\t\t\tlocals: {\
\n\t\t\t\tfoo: 'bar'\
\n\t\t\t}\
\n\t\t};\
\n\n\t\tresponse.render('$(GROUP_CAMELIZED)/remove', options);\
\n\t}"
else
CONTROLLER_JS += "\n\n\tfunction index(request, response){\
\n\t\t// ... your code goes in here ...\
\n\t}\
\n\n\tfunction show(request, response, next){\
\n\t\t// ... your code goes in here ...\
\n\t}\
\n\n\tfunction edit(request, response, next){\
\n\t\t// ... your code goes in here ...\
\n\t}\
\n\n\tfunction update(request, response, next){\
\n\t\t// ... your code goes in here ...\
\n\t}\
\n\n\tfunction remove(request, response, next){\
\n\t\t// ... your code goes in here ...\
\n\t}"
endif

CONTROLLER_JS += "\n\n\treturn {\
\n\t\tindex: index,\
\n\t\tshow: show,\
\n\t\tedit: edit,\
\n\t\tupdate: update,\
\n\t\tremove: remove\
\n\t}\
\n};"

ifeq "$(APP)" ""
TESTCONTROLLER_JS = "describe('$(NAME)', function(){\
\n\tvar $(NAME) = require('../../$(CONTROLLERS_DIRECTORY)/$(NAME_CAMELIZED)');"
else
TESTCONTROLLER_JS = "describe('$(APP) > $(NAME)', function(){\
\n\tvar $(NAME) = require('../../../../$(APPS_DIRECTORY)/$(APP_CAMELIZED)/$(CONTROLLERS_DIRECTORY)/$(NAME_CAMELIZED)');"
endif

TESTCONTROLLER_JS += "\n\tvar controller = new $(NAME)();\
\n\n\tdescribe('\#model', function(){\
\n\t\tit('should not exist', function(done){\
\n\t\t\tcontroller.should.not.have.property('model');\
\n\t\t\tdone();\
\n\t\t});\
\n\t});\
\n\n\tdescribe('\#index()', function(){\
\n\t\tit('should exist', function(done){\
\n\t\t\tcontroller.should.have.property('index');\
\n\t\t\tdone();\
\n\t\t});\
\n\t});\
\n\n\tdescribe('\#show()', function(){\
\n\t\tit('should exist', function(done){\
\n\t\t\tcontroller.should.have.property('show');\
\n\t\t\tdone();\
\n\t\t});\
\n\t});\
\n\n\tdescribe('\#edit()', function(){\
\n\t\tit('should exist', function(done){\
\n\t\t\tcontroller.should.have.property('edit');\
\n\t\t\tdone();\
\n\t\t});\
\n\t});\
\n\n\tdescribe('\#update()', function(){\
\n\t\tit('should exist', function(done){\
\n\t\t\tcontroller.should.have.property('update');\
\n\t\t\tdone();\
\n\t\t});\
\n\t});\
\n\n\tdescribe('\#remove()', function(){\
\n\t\tit('should exist', function(done){\
\n\t\t\tcontroller.should.have.property('remove');\
\n\t\t\tdone();\
\n\t\t});\
\n\t});\
\n});"

MODEL_JS = "var $(NAME) = exports = module.exports = function $(NAME)(){\
\n\tvar counter = -1;\
\n\tvar index = 0;\
\n\n\tfunction method1(){\
\n\t\treturn '\#method1()';\
\n\t}\
\n\n\tfunction method2(text){\
\n\t\treturn text;\
\n\t}\
\n\n\treturn {\
\n\t\tindex: index,\
\n\t\tmethod1: method1,\
\n\t\tmethod2: method2\
\n\t}\
\n};"

ifeq "$(APP)" ""
TESTMODEL_JS = "describe('$(NAME)', function(){\
\n\tvar $(NAME) = require('../../$(MODELS_DIRECTORY)/$(NAME_CAMELIZED)');"
else
TESTMODEL_JS = "describe('$(APP) > $(NAME)', function(){\
\n\tvar $(NAME) = require('../../../../$(APPS_DIRECTORY)/$(APP_CAMELIZED)/$(MODELS_DIRECTORY)/$(NAME_CAMELIZED)');"
endif

TESTMODEL_JS += "\n\tvar instance = new $(NAME)();\
\n\n\tdescribe('\#counter', function(){\
\n\t\tit('should not exist', function(done){\
\n\t\t\tinstance.should.not.have.property('counter');\
\n\t\t\tdone();\
\n\t\t});\
\n\t});\
\n\n\tdescribe('\#index', function(){\
\n\t\tit('should exist', function(done){}\
\n\t\t\tinstance.should.have.property('index');\
\n\t\t\tdone();\
\n\t\t});\
\n\t\tit('should be 0', function(done){\
\n\t\t\tinstance.index.should.eql(0);\
\n\t\t\tdone();\
\n\t\t});\
\n\t});\
\n\n\tdescribe('\#method1()', function(){\
\n\t\tit('should exist', function(done){\
\n\t\t\tinstance.should.have.property('method1');\
\n\t\t\tdone();\
\n\t\t});\
\n\t\tit('should return a predefined text', function(done){\
\n\t\t\tinstance.method1().should.eql('\#method1()');\
\n\t\t\tdone();\
\n\t\t});\
\n\t});\
\n\n\tdescribe('\#method2()', function(){\
\n\t\tit('should exist', function(done){\
\n\t\t\tinstance.should.have.property('method2');\
\n\t\t\tdone();\
\n\t\t});\
\n\t\tit('should return a given text', function(done){\
\n\t\t\tinstance.method2('text').should.eql('text');\
\n\t\t\tdone();\
\n\t\t});\
\n\t});\
\n});"
