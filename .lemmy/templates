CAMELIZE_NAME = $(NAME) | sed -e 's/\([A-Z]\)/\_\1/g' -e 's/\_//' | tr '[:upper:]' '[:lower:]'
FIRST_CHARACTER = $(shell echo $(NAME) | sed -e 's/\([A-Z]\)\(.*\)/\1/g' | tr '[:upper:]' '[:lower:]')
REST_OF_CHARACTERS = $(shell echo $(NAME) | sed -e 's/\([A-Z]\)\(.*\)/\2/g')

NAME_CAMELIZED  = $(shell echo $(CAMELIZE_NAME))
NAME_FUNCTIONALIZED = $(FIRST_CHARACTER)$(REST_OF_CHARACTERS)

HELPMENU = "\
\n---------------------------------------------------------------------------------\
\n| LEMMY: 49% Motherfucker | 51% Son of a Bitch JS/CS Express+Mocha Boilerplate. |\
\n---------------------------------------------------------------------------------\
\n\nList of Commands you're able to use:\
\n\n-> setup [APP_LANGUAGE=CS]\tKick-start your JS/CS Express project for once and for all (JS is default).\
\n-> dependencies\t\t\tInstall locally all the dependencies defined on the package JSON file.\
\n-> clean\t\t\tClean-up all the generated code from your Express project.\
\n-> module NAME=Module\t\tGenerate a new Module file and its respective Test file into your project.\
\n-> middleware NAME=Middleware\tGenerate a new Middleware file and its respective Test file into your project.\
\n-> route NAME=Route\t\tGenerate a new Route Container file and its respective Test file into your project.\
\n-> controller NAME=Controller\tGenerate a new Controller file and its respective Test file into your project.\
\n-> model NAME=Model\t\tGenerate a new Model file and its respective Test file into your project.\
\n-> build\t\t\tCompiles your CS code into the JS equivalent.\
\n-> watch\t\t\tWatches any change on your CS code and automatically compiles it into its JS equivalent.\
\n-> run\t\t\t\tRun your project on Node.JS\
\n-> test\t\t\t\tTest your Express project using Mocha.\
\n-> deploy\t\t\tPrepares your Express project for deployment.\
\n-> mit-license\t\t\tGenerate a MIT license for your Express project.\
\n-> help\t\t\t\tDisplay the Help menu you're reading right now.\
\n"

GITIGNORE = ".DS_Store\
\nMakefile\
\n*.log\
\n.lemmy/\
\nnode_modules/\
\ndeploy/"

ifeq "$(APP_LANGUAGE)" "CS"
GITIGNORE += "\nlib/\
\nmodules/\
\ntest/"
endif

MODULE_JS = "module.exports = {\
\n\t//var example = 0;\
\n\n\tmethod1: function() {\
\n\t\t// ... your code goes in here ...\
\n\t},\
\n\tmethod2: function() {\
\n\t\t// ... your code goes in here ...\
\n\t}\
\n};"

MODULE_CS = "module.exports = {\
\n\t\#example = 0\
\n\n\tmethod1: ->\
\n\t\t\# ... your code goes in here ...\
\n\n\tmethod2: ->\
\n\t\t\# ... your code goes in here ...\
\n}"

TESTMODULE_JS = "describe('$(NAME)', function() {\
\n\tvar $(NAME_CAMELIZED) = require('../../$(MODULES_DIRECTORY)/$(NAME_CAMELIZED)');\
\n\n\tdescribe('\#example', function() {\
\n\t\tit('should not exist', function() {\
\n\t\t\t$(NAME_CAMELIZED).should.not.have.property('example');\
\n\t\t});\
\n\t});\
\n\n\tdescribe('\#method1()', function() {\
\n\t\tit('should exist.', function() {\
\n\t\t\t$(NAME_CAMELIZED).should.have.property('method1');\
\n\t\t});\
\n\t});\
\n\n\tdescribe('\#method2()', function() {\
\n\t\tit('should exist.', function() {\
\n\t\t\t$(NAME_CAMELIZED).should.have.property('method2');\
\n\t\t});\
\n\t});\
\n})"

TESTMODULE_CS = "describe '$(NAME)', ->\
\n\t$(NAME_CAMELIZED) = require '../../$(SOURCE_DIRECTORY)/$(MODULES_DIRECTORY)/$(NAME_CAMELIZED)'\
\n\n\tdescribe '\#example', ->\
\n\t\tit 'should not exist', ->\
\n\t\t\t$(NAME_CAMELIZED).should.not.have.property 'example'\
\n\t\t\treturn\
\n\n\tdescribe '\#method1()', ->\
\n\t\tit 'should exist', ->\
\n\t\t\t$(NAME_CAMELIZED).should.have.property 'method1'\
\n\t\t\treturn\
\n\n\tdescribe '\#method2()', ->\
\n\t\tit 'should exist', ->\
\n\t\t\t$(NAME_CAMELIZED).should.have.property 'method2'\
\n\t\t\treturn"

MIDDLEWARE_JS = "//var example = require('example');\
\n\nmodule.exports = function $(NAME_FUNCTIONALIZED)(request, response, next) {\
\n\tvar app = request.app;\
\n\n\t// ... your code goes in here ...\
\n\n\tnext();\
\n};"

MIDDLEWARE_CS = "\#example = require 'example'\
\n\n$(NAME_FUNCTIONALIZED) = module.exports = (request, response, next) ->\
\n\tapp = request.app\
\n\n\t\# ... your code goes in here ...\
\n\n\tnext()\
\n\treturn"

TESTMIDDLEWARE_JS = "describe('$(NAME)', function() {\
\n\tvar $(NAME_FUNCTIONALIZED) = require('../../$(MIDDLEWARES_DIRECTORY)/$(NAME_CAMELIZED)');\
\n\tvar app = require('express').createServer();\
\n\tvar http = require('http');\
\n\n\tapp.configure(function() {\
\n\t\tapp.use($(NAME_FUNCTIONALIZED));\
\n\t});\
\n\n\tapp.get('/', function(request, response) {\
\n\t\tresponse.end();\
\n\t});\
\n\n\tapp.listen(3000);\
\n\n\tit('should exist', function() {\
\n\t\tvar options = {\
\n\t\t\thost: 'localhost',\
\n\t\t\tport : 3000,\
\n\t\t\tpath: '/'\
\n\t\t};\
\n\n\t\thttp.get(options, function(response) {\
\n\t\t\tapp.stack[1]['handle'].name.should.eql($(NAME_FUNCTIONALIZED).name);\
\n\t\t});\
\n\t});\
\n});"

TESTMIDDLEWARE_CS = "describe '$(NAME)', ->\
\n\t$(NAME_FUNCTIONALIZED) = require '../../$(SOURCE_DIRECTORY)/$(MIDDLEWARES_DIRECTORY)/$(NAME_CAMELIZED)'\
\n\tapp = require('express').createServer()\
\n\thttp = require 'http'\
\n\n\tapp.configure ->\
\n\t\tapp.use $(NAME_FUNCTIONALIZED)\
\n\t\treturn\
\n\n\tapp.get '/', (request, response) ->\
\n\t\tresponse.end()\
\n\t\treturn\
\n\n\tapp.listen 3000\
\n\n\tit 'should exist', ->\
\n\t\toptions = {\
\n\t\t\thost: 'localhost',\
\n\t\t\tport : 3000,\
\n\t\t\tpath: '/'\
\n\t\t}\
\n\n\t\thttp.get options, (response) ->\
\n\t\t\tapp.stack[1]['handle'].name.should.eql($(NAME_FUNCTIONALIZED).name)\
\n\t\t\treturn"

ROUTE_JS = "//var example = require('example');\
\n\nmodule.exports = function(app) {\
\n\tapp.all('/$(NAME_CAMELIZED)(/*)?', function(request, response, next) {\
\n\t\t// ... your code goes in here ...\
\n\t});\
\n\tapp.get('/$(NAME_CAMELIZED)', function(request, response, next) {\
\n\t\t// ... your code goes in here ...\
\n\t});\
\n\tapp.post('/$(NAME_CAMELIZED)', function(request, response, next) {\
\n\t\t// ... your code goes in here ...\
\n\t});\
\n\tapp.put('/$(NAME_CAMELIZED)', function(request, response, next) {\
\n\t\t// ... your code goes in here ...\
\n\t});\
\n\tapp.del('/$(NAME_CAMELIZED)', function(request, response, next) {\
\n\t\t// ... your code goes in here ...\
\n\t});\
\n};"

ROUTE_CS = "\#example = require 'example'\
\n\nmodule.exports = (app) ->\
\n\tapp.all '/$(NAME_CAMELIZED)(/*)?', (request, response, next) ->\
\n\t\t\# ... your code goes in here ...\
\n\n\tapp.get '/$(NAME_CAMELIZED)', (request, response, next) ->\
\n\t\t\# ... your code goes in here ...\
\n\n\tapp.post '/$(NAME_CAMELIZED)', (request, response, next) ->\
\n\t\t\# ... your code goes in here ...\
\n\n\tapp.put '/$(NAME_CAMELIZED)', (request, response, next) ->\
\n\t\t\# ... your code goes in here ...\
\n\n\tapp.del '/$(NAME_CAMELIZED)', (request, response, next) ->\
\n\t\t\# ... your code goes in here ..."

TESTROUTE_JS = "describe('$(NAME)', function(){\
\n\tvar app = require('express').createServer();\
\n\tvar http = require('http');\
\n\n\trequire('../../$(ROUTES_DIRECTORY)/$(NAME_CAMELIZED)')(app);\
\n\n\tapp.listen(3000);\
\n\n\tdescribe('\#get()', function(){\
\n\t\tit('\'/$(NAME_CAMELIZED)\' route should exist', function(){\
\n\t\t\tvar options = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/$(NAME_CAMELIZED)',\
\n\t\t\t\tmethod: 'GET'\
\n\t\t\t};\
\n\n\t\t\thttp.request(options, function(response){\
\n\t\t\t\tresponse.statusCode.should.eql(200);\
\n\t\t\t});\
\n\t\t});\
\n\n\t\tit('\'/$(NAME_CAMELIZED)/xxx/\' route should exist', function(){\
\n\t\t\tvar options = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/$(NAME_CAMELIZED)/xxx/',\
\n\t\t\t\tmethod: 'GET'\
\n\t\t\t};\
\n\n\t\t\thttp.request(options, function(response){\
\n\t\t\t\tresponse.statusCode.should.eql(200);\
\n\t\t\t});\
\n\t\t});\
\n\n\t\tit('\'/testing\' route should exist', function(){\
\n\t\t\tvar options = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/testing',\
\n\t\t\t\tmethod: 'GET'\
\n\t\t\t};\
\n\n\t\t\thttp.request(options, function(response){\
\n\t\t\t\tresponse.statusCode.should.eql(200);\
\n\t\t\t});\
\n\t\t});\
\n\t});\
\n\n\tdescribe('\#post()', function(){\
\n\t\tit('\'/$(NAME_CAMELIZED)\' route should exist', function(){\
\n\t\t\tvar options = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/$(NAME_CAMELIZED)',\
\n\t\t\t\tmethod: 'POST'\
\n\t\t\t};\
\n\n\t\t\thttp.request(options, function(response){\
\n\t\t\t\tresponse.statusCode.should.eql(200);\
\n\t\t\t});\
\n\t\t});\
\n\n\t\tit('\'/$(NAME_CAMELIZED)/xxx/\' route should exist', function(){\
\n\t\t\tvar options = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/$(NAME_CAMELIZED)/xxx/',\
\n\t\t\t\tmethod: 'POST'\
\n\t\t\t};\
\n\n\t\t\thttp.request(options, function(response){\
\n\t\t\t\tresponse.statusCode.should.eql(200);\
\n\t\t\t});\
\n\t\t});\
\n\n\t\tit('\'/testing\' route should exist', function(){\
\n\t\t\tvar options = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/testing',\
\n\t\t\t\tmethod: 'POST'\
\n\t\t\t};\
\n\n\t\t\thttp.request(options, function(response){\
\n\t\t\t\tresponse.statusCode.should.eql(200);\
\n\t\t\t});\
\n\t\t});\
\n\t});\
\n\n\tdescribe('\#put()', function(){\
\n\t\tit('\'/$(NAME_CAMELIZED)\' route should exist', function(){\
\n\t\t\tvar options = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/$(NAME_CAMELIZED)',\
\n\t\t\t\tmethod: 'PUT'\
\n\t\t\t};\
\n\n\t\t\thttp.request(options, function(response){\
\n\t\t\t\tresponse.statusCode.should.eql(200);\
\n\t\t\t});\
\n\t\t});\
\n\n\t\tit('\'/$(NAME_CAMELIZED)/xxx/\' route should exist', function(){\
\n\t\t\tvar options = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/$(NAME_CAMELIZED)/xxx/',\
\n\t\t\t\tmethod: 'PUT'\
\n\t\t\t};\
\n\n\t\t\thttp.request(options, function(response){\
\n\t\t\t\tresponse.statusCode.should.eql(200);\
\n\t\t\t});\
\n\t\t});\
\n\n\t\tit('\'/testing\' route should exist', function(){\
\n\t\t\tvar options = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/testing',\
\n\t\t\t\tmethod: 'PUT'\
\n\t\t\t};\
\n\n\t\t\thttp.request(options, function(response){\
\n\t\t\t\tresponse.statusCode.should.eql(200);\
\n\t\t\t});\
\n\t\t});\
\n\t});\
\n\n\tdescribe('\#del()', function(){\
\n\t\tit('\'/$(NAME_CAMELIZED)\' route should exist', function(){\
\n\t\t\tvar options = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/$(NAME_CAMELIZED)',\
\n\t\t\t\tmethod: 'DELETE'\
\n\t\t\t};\
\n\n\t\t\thttp.request(options, function(response){\
\n\t\t\t\tresponse.statusCode.should.eql(200);\
\n\t\t\t});\
\n\t\t});\
\n\n\t\tit('\'/$(NAME_CAMELIZED)/xxx/\' route should exist', function(){\
\n\t\t\tvar options = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/$(NAME_CAMELIZED)/xxx/',\
\n\t\t\t\tmethod: 'DELETE'\
\n\t\t\t};\
\n\n\t\t\thttp.request(options, function(response){\
\n\t\t\t\tresponse.statusCode.should.eql(200);\
\n\t\t\t});\
\n\t\t});\
\n\n\t\tit('\'/testing\' route should exist', function(){\
\n\t\t\tvar options = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/testing',\
\n\t\t\t\tmethod: 'DELETE'\
\n\t\t\t};\
\n\n\t\t\thttp.request(options, function(response){\
\n\t\t\t\tresponse.statusCode.should.eql(200);\
\n\t\t\t});\
\n\t\t});\
\n\t});\
\n});"

TESTROUTE_CS = "describe '$(NAME)', ->\
\n\tapp = require('express').createServer()\
\n\thttp = require 'http'\
\n\n\trequire('../../$(SOURCE_DIRECTORY)/$(ROUTES_DIRECTORY)/$(NAME_CAMELIZED)')(app)\
\n\n\tapp.listen 3000\
\n\n\tdescribe '\#get()', ->\
\n\t\tit '\'/$(NAME_CAMELIZED)\' route should exist', ->\
\n\t\t\toptions = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/$(NAME_CAMELIZED)',\
\n\t\t\t\tmethod: 'GET'\
\n\t\t\t}\
\n\n\t\t\thttp.request options, (response) ->\
\n\t\t\t\tresponse.statusCode.should.eql 200\
\n\t\t\t\treturn\
\n\n\t\tit '\'/$(NAME_CAMELIZED)/xxx/\' route should exist', ->\
\n\t\t\toptions = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/$(NAME_CAMELIZED)/xxx/',\
\n\t\t\t\tmethod: 'GET'\
\n\t\t\t}\
\n\n\t\t\thttp.request options, (response) ->\
\n\t\t\t\tresponse.statusCode.should.eql 200\
\n\t\t\t\treturn\
\n\n\t\tit '\'/testing\' route should exist', ->\
\n\t\t\toptions = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/testing',\
\n\t\t\t\tmethod: 'GET'\
\n\t\t\t}\
\n\n\t\t\thttp.request options, (response) ->\
\n\t\t\t\tresponse.statusCode.should.eql 404\
\n\t\t\t\treturn\
\n\n\tdescribe '\#post()', ->\
\n\t\tit '\'/$(NAME_CAMELIZED)\' route should exist', ->\
\n\t\t\toptions = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/$(NAME_CAMELIZED)',\
\n\t\t\t\tmethod: 'POST'\
\n\t\t\t}\
\n\n\t\t\thttp.request options, (response) ->\
\n\t\t\t\tresponse.statusCode.should.eql 200\
\n\t\t\t\treturn\
\n\n\t\tit '\'/$(NAME_CAMELIZED)/xxx/\' route should exist', ->\
\n\t\t\toptions = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/$(NAME_CAMELIZED)/xxx/',\
\n\t\t\t\tmethod: 'POST'\
\n\t\t\t}\
\n\n\t\t\thttp.request options, (response) ->\
\n\t\t\t\tresponse.statusCode.should.eql 200\
\n\t\t\t\treturn\
\n\n\t\tit '\'/testing\' route should exist', ->\
\n\t\t\toptions = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/testing',\
\n\t\t\t\tmethod: 'POST'\
\n\t\t\t}\
\n\n\t\t\thttp.request options, (response) ->\
\n\t\t\t\tresponse.statusCode.should.eql 404\
\n\t\t\t\treturn\
\n\n\tdescribe '\#put()', ->\
\n\t\tit '\'/$(NAME_CAMELIZED)\' route should exist', ->\
\n\t\t\toptions = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/$(NAME_CAMELIZED)',\
\n\t\t\t\tmethod: 'PUT'\
\n\t\t\t}\
\n\n\t\t\thttp.request options, (response) ->\
\n\t\t\t\tresponse.statusCode.should.eql 200\
\n\t\t\t\treturn\
\n\n\t\tit '\'/$(NAME_CAMELIZED)/xxx/\' route should exist', ->\
\n\t\t\toptions = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/$(NAME_CAMELIZED)/xxx/',\
\n\t\t\t\tmethod: 'PUT'\
\n\t\t\t}\
\n\n\t\t\thttp.request options, (response) ->\
\n\t\t\t\tresponse.statusCode.should.eql 200\
\n\t\t\t\treturn\
\n\n\t\tit '\'/testing\' route should exist', ->\
\n\t\t\toptions = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/testing',\
\n\t\t\t\tmethod: 'PUT'\
\n\t\t\t}\
\n\n\t\t\thttp.request options, (response) ->\
\n\t\t\t\tresponse.statusCode.should.eql 404\
\n\t\t\t\treturn\
\n\n\tdescribe '\#del()', ->\
\n\t\tit '\'/$(NAME_CAMELIZED)\' route should exist', ->\
\n\t\t\toptions = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/$(NAME_CAMELIZED)',\
\n\t\t\t\tmethod: 'DELETE'\
\n\t\t\t}\
\n\n\t\t\thttp.request options, (response) ->\
\n\t\t\t\tresponse.statusCode.should.eql 200\
\n\n\t\tit '\'/$(NAME_CAMELIZED)/xxx/\' route should exist', ->\
\n\t\t\t\treturn\
\n\t\t\toptions = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/$(NAME_CAMELIZED)/xxx/',\
\n\t\t\t\tmethod: 'DELETE'\
\n\t\t\t}\
\n\n\t\t\thttp.request options, (response) ->\
\n\t\t\t\tresponse.statusCode.should.eql 200\
\n\t\t\t\treturn\
\n\n\t\tit '\'/testing\' route should exist', ->\
\n\t\t\toptions = {\
\n\t\t\t\thost: 'localhost',\
\n\t\t\t\tport: 3000,\
\n\t\t\t\tpath: '/testing',\
\n\t\t\t\tmethod: 'DELETE'\
\n\t\t\t}\
\n\n\t\t\thttp.request options, (response) ->\
\n\t\t\t\tresponse.statusCode.should.eql 404\
\n\t\t\t\treturn"

CONTROLLER_JS = "//var Example = require('example');\
\n\nvar $(NAME) = exports = module.exports = function $(NAME) {\
\n\t//var model = new Example();\
\n\n\tfunction index(request, response) {\
\n\t\t// ... your code goes in here ...\
\n\t}\
\n\n\tfunction show(request, response, next) {\
\n\t\t// ... your code goes in here ...\
\n\t}\
\n\n\tfunction edit(request, response, next) {\
\n\t\t// ... your code goes in here ...\
\n\t}\
\n\n\tfunction update(request, response, next) {\
\n\t\t// ... your code goes in here ...\
\n\t}\
\n\n\tfunction remove(request, response, next) {\
\n\t\t// ... your code goes in here ...\
\n\t}\
\n\n\treturn {\
\n\t\tindex: index,\
\n\t\tshow: show,\
\n\t\tedit: edit,\
\n\t\tupdate: update,\
\n\t\tremove: remove\
\n\t}\
\n};"

CONTROLLER_CS = "\#Example = require 'example'\
\n\n$(NAME) = exports = module.exports = ->\
\n\t\#model = new Example()\
\n\n\tindex: (request, response) ->\
\n\t\t\# ... your code goes in here ...\
\n\n\tshow: (request, response, next) ->\
\n\t\t\# ... your code goes in here ...\
\n\n\tedit: (request, response, next) ->\
\n\t\t\# ... your code goes in here ...\
\n\n\tupdate: (request, response, next) ->\
\n\t\t\# ... your code goes in here ...\
\n\n\tremove: (request, response, next) ->\
\n\t\t\# ... your code goes in here ..."

TESTCONTROLLER_JS = "describe('$(NAME)', function() {\
\n\tvar $(NAME) = require('../../$(CONTROLLERS_DIRECTORY)/$(NAME_CAMELIZED)');
\n\tvar controller = new $(NAME)();\
\n\n\tdescribe('\#model', function() {\
\n\t\tit('should not exist', function() {\
\n\t\t\tcontroller.should.not.have.property('model');\
\n\t\t});\
\n\t});\
\n\n\tdescribe('\#index()', function() {\
\n\t\tit('should exist', function() {\
\n\t\t\tcontroller.should.have.property('index');\
\n\t\t});\
\n\t});\
\n\n\tdescribe('\#show()', function() {\
\n\t\tit('should exist', function() {\
\n\t\t\tcontroller.should.have.property('show');\
\n\t\t});\
\n\t});\
\n\n\tdescribe('\#edit()', function() {\
\n\t\tit('should exist', function() {\
\n\t\t\tcontroller.should.have.property('edit');\
\n\t\t});\
\n\t});\
\n\n\tdescribe('\#update()', function() {\
\n\t\tit('should exist', function() {\
\n\t\t\tcontroller.should.have.property('update');\
\n\t\t});\
\n\t});\
\n\n\tdescribe('\#remove()', function() {\
\n\t\tit('should exist', function() {\
\n\t\t\tcontroller.should.have.property('remove');\
\n\t\t});\
\n\t});\
\n});"

TESTCONTROLLER_CS = "describe '$(NAME), ->\
\n\t$(NAME) = require '../../$(SOURCE_DIRECTORY)/$(CONTROLLERS_DIRECTORY)/$(NAME_CAMELIZED)'\
\n\tcontroller = new $(NAME)()\
\n\n\tdescribe '\#model', ->\
\n\t\tit 'should not exist', ->\
\n\t\t\tcontroller.should.not.have.property 'model'\
\n\t\t\treturn\
\n\n\tdescribe '\#index()', ->\
\n\t\tit 'should exist', ->\
\n\t\t\tcontroller.should.have.property 'index'\
\n\t\t\treturn\
\n\n\tdescribe '\#show()', ->\
\n\t\tit 'should exist', ->\
\n\t\t\tcontroller.should.have.property 'show'\
\n\t\t\treturn\
\n\n\tdescribe '\#edit()', ->\
\n\t\tit 'should exist', ->\
\n\t\t\tcontroller.should.have.property 'edit'\
\n\t\t\treturn\
\n\n\tdescribe '\#update()', ->\
\n\t\tit 'should exist', ->\
\n\t\t\tcontroller.should.have.property 'update'\
\n\t\t\treturn\
\n\n\tdescribe '\#remove()', ->\
\n\t\tit 'should exist', ->\
\n\t\t\tcontroller.should.have.property 'remove'\
\n\t\t\treturn"

MODEL_JS = "var $(NAME) = exports = module.exports = function $(NAME)() {\
\n\tvar counter = -1;\
\n\tvar index = 0;\
\n\n\tfunction method1() {\
\n\t\treturn '\#method1()';\
\n\t}\
\n\n\tfunction method2(text) {\
\n\t\treturn text;\
\n\t}\
\n\n\treturn {\
\n\t\tindex: index,\
\n\t\tmethod1: method1,\
\n\t\tmethod2: method2\
\n\t}\
\n};"

MODEL_CS = "$(NAME) = exports = module.exports = ->\
\n\tcounter = -1\
\n\n\tindex: 0\
\n\n\tmethod1: ->\
\n\t\t'\#method1()'\
\n\n\tmethod2: (text) ->\
\n\t\ttext"

TESTMODEL_JS = "describe('$(NAME)', function() {\
\n\tvar $(NAME) = require('../../$(MODELS_DIRECTORY)/$(NAME_CAMELIZED)');\
\n\tvar instance = new $(NAME)();\
\n\n\tdescribe('\#counter', function() {\
\n\t\tit('should not exist', function() {\
\n\t\t\tinstance.should.not.have.property('counter');\
\n\t\t});\
\n\t});\
\n\n\tdescribe('\#index', function() {\
\n\t\tit('should exist', function() {\
\n\t\t\tinstance.should.have.property('index');\
\n\t\t});\
\n\t\tit('should be 0', function() {\
\n\t\t\tinstance.index.should.eql(0);\
\n\t\t});\
\n\t});\
\n\n\tdescribe('\#method1()', function() {\
\n\t\tit('should exist', function() {\
\n\t\t\tinstance.should.have.property('method1');\
\n\t\t});\
\n\t\tit('should return a predefined text', function() {\
\n\t\t\tinstance.method1().should.eql('\#method1()');\
\n\t\t});\
\n\t});\
\n\n\tdescribe('\#method2()', function() {\
\n\t\tit('should exist', function() {\
\n\t\t\tinstance.should.have.property('method2');\
\n\t\t});\
\n\t\tit('should return a given text', function() {\
\n\t\t\tinstance.method2('text').should.eql('text');\
\n\t\t});\
\n\t});\
\n});"

TESTMODEL_CS = "describe '$(NAME)', ->\
\n\t$(NAME) = require '../../$(SOURCE_DIRECTORY)/$(MODELS_DIRECTORY)/$(NAME_CAMELIZED)'\
\n\tinstance = new $(NAME)()\
\n\n\tdescribe '\#counter', ->\
\n\t\tit 'should not exist', ->\
\n\t\t\tinstance.should.not.have.property 'counter'\
\n\t\t\treturn\
\n\n\tdescribe '\#index', ->\
\n\t\tit 'should exist', ->\
\n\t\t\tinstance.should.have.property 'index'\
\n\t\t\treturn\
\n\n\t\tit 'should equal 0', ->\
\n\t\t\tinstance.index.should.eql 0\
\n\t\t\treturn\
\n\n\tdescribe '\#method1()', ->\
\n\t\tit 'should exist', ->\
\n\t\t\tinstance.should.have.property 'method1'\
\n\t\t\treturn\
\n\n\t\tit 'should return a predefined text', ->\
\n\t\t\tinstance.method1().should.eql '\#method1()'\
\n\t\t\treturn\
\n\n\tdescribe '\#method2()', ->\
\n\t\tit 'should exist', ->\
\n\t\t\tinstance.should.have.property 'method2'\
\n\t\t\treturn\
\n\n\t\tit 'should equal 0', ->\
\n\t\t\tinstance.method2('text').should.eql 'text'\
\n\t\t\treturn"

APP_JS = "var express = require('express');\
\n\nvar app = express.createServer();\
\n\napp.configure(function(){\
\n\tapp.use(express.logger());\
\n\tapp.use(express.methodOverride());\
\n\tapp.use(express.bodyParser());\
\n\tapp.use(express.router);\
\n});\
\n\napp.configure('development', function(){\
\n\tapp.use(express.errorHandler({\
\n\t\tdumpExceptions: true,\
\n\t\tshowStack: true\
\n\t}));\
\n});\
\n\napp.configure('production', function(){\
\n\tapp.use(express.errorHandler());\
\n});\
\n\napp.listen(3000);"

APP_CS = "express = require 'express'\
\n\napp = express.createServer()\
\n\napp.configure ->\
\n\tapp.use express.logger()\
\n\tapp.use express.methodOverride()\
\n\tapp.use express.bodyParser()\
\n\tapp.use express.router\
\n\treturn\
\n\napp.configure 'development', ->\
\n\tapp.use express.errorHandler(\
\n\t\tdumpExceptions: true,\
\n\t\tshowStack: true\
\n\t)\
\n\treturn\
\n\napp.configure 'production', ->\
\n\tapp.use express.errorHandler()\
\n\treturn\
\n\napp.listen 3000"

PACKAGE = '{\
\n\t"name": "$(APP_NAME)",\
\n\t"description": "Project description goes here...",\
\n\t"version": "0.0.1",\
\n\t"author": "$(APP_AUTHOR) <$(APP_EMAIL)>",\
\n\t"homepage": "$(APP_URL)",\
\n\t"keywords": [],\
\n\t"main": "./app.js",\
\n\t"engines": {\
\n\t\t"node": ">= 0.4.0 < 0.7.0"\
\n\t},\
\n\t"directories": {\
\n\t\t"lib": "./lib",\
\n\t\t"modules": "./modules",\
\n\t\t"node_modules": "./node_modules",\
\n\t\t"test": "./test"\
\n\t},\
\n\t"dependencies": {\
\n\t\t"express": ">= 2.5.2"\
\n\t},\
\n\t"devDependencies": {\
\n\t\t"mocha": ">= 0.5.0",\
\n\t\t"should": ">= 0.4.1"'

ifeq "$(APP_LANGUAGE)" "CS"
PACKAGE += ',\
\n\t\t"coffee-script": ">= 1.2.0",\
\n\t\t"jitter": ">= 1.1.1"'
endif

PACKAGE += '\n\t},\
\n\t"repositories": [],\
\n\t"bugs": "http://bugs.example.com",\
\n\t"maintainers": [],\
\n\t"contributors": [],\
\n\t"licenses": []\
\n}'
