APP_CS = "express = require 'express'"

ifeq "$(APP_TYPE)" "MODULAR"
APP_CS += "\n/#subapp = require '$(APPS_DIRECTORY)/subapp/app'"
endif

APP_CS += "\n\napp = express.createServer()\
\n\napp.configure ->"

ifneq "$(APP_ENGINE)" "EJS"
APP_CS += "\n\tapp.set 'views', __dirname + '/views'"
endif

ifeq "$(APP_ENGINE)" "EJS"
APP_CS += "\n\tapp.set 'view engine', 'ejs'"
else
ifeq "$(APP_ENGINE)" "JADE"
APP_CS += "\n\tapp.set 'view engine', 'jade'"
endif
endif

APP_CS += "\n\tapp.use express.logger()\
\n\tapp.use express.methodOverride()\
\n\tapp.use express.bodyParser()"

ifneq "$(APP_ENGINE)" ""
APP_CS += "\n\tapp.use express.static __dirname + '/public'"
endif

APP_CS += "\n\treturn\
\n\napp.configure 'development', ->\
\n\tapp.use express.errorHandler(\
\n\t\tdumpExceptions: true,\
\n\t\tshowStack: true\
\n\t)\
\n\treturn\
\n\napp.configure 'production', ->\
\n\tapp.use express.errorHandler()\
\n\treturn"

ifeq "$(APP_TYPE)" "MODULAR"
APP_CS += "\n\n\#app.use '/subapp', subapp"
else
ifneq "$(APP_ENGINE)" ""
APP_CS += "\n\n\#app.get '/?', (request, response) ->\
\n\t\# ... your code goes in here ...\
\n\n\t\# options = {\
\n\t\#\t layout: 'layout',\
\n\t\#\t locals: {\
\n\t\#\t\t foo: 'bar'\
\n\t\#\t }\
\n\n\t\# response.render 'index', options\
\n\t\# response.end()\
\n\t\# return"
endif
endif

APP_CS += "\n\napp.listen 3000"

SUBAPP_CS = "express = require 'express'\
\n\napp = module.exports = express.createServer()\
\n\napp.configure ->"

ifneq "$($(NAME_UPPERCASED)_ENGINE)" ""
SUBAPP_CS += "\n\t\#app.set 'views', __dirname + '/views/$(APPS_DIRECTORY)/$(NAME_CAMELIZED)'"
endif

ifeq "$($(NAME_UPPERCASED)_ENGINE)" "EJS"
SUBAPP_CS += "\n\tapp.set 'view engine', 'ejs'"
else
ifeq "$($(NAME_UPPERCASED)_ENGINE)" "JADE"
SUBAPP_CS += "\n\tapp.set 'view engine', 'jade'"
endif
endif

SUBAPP_CS += "\n\t\#app.use(express.router)"

ifneq "$($(NAME_UPPERCASED)_ENGINE)" ""
SUBAPP_CS += "\n\t\#app.use express.static __dirname + '/public'"
endif 

SUBAPP_CS += "\n\treturn\
\n\napp.get '/?', (request, response) ->\
\n\t\# ... your code goes in here ...\
\n\tresponse.end()\
\n\treturn"

TESTSUBAPP_CS = "describe 'App > $(NAME)', ->\
\n\t$(NAME_CAMELIZED) = require '../../../$(SOURCE_DIRECTORY)/$(APPS_DIRECTORY)/$(NAME_CAMELIZED)/app'\
\n\tapp = require('express').createServer()\
\n\trequest = require 'request'\
\n\tshould = require 'should'\
\n\n\tapp.use '/$(NAME_CAMELIZED)', $(NAME_CAMELIZED)\
\n\n\tbefore (done) ->\
\n\t\tapp.listen 3000\
\n\t\tdone()\
\n\t\treturn\
\n\n\tit 'should be mounted on the application stack.', (done) ->\
\n\t\tapp.stack[1].route.should.eql '/$(NAME_CAMELIZED)'\
\n\t\tapp.stack[1].handle.should.be.a 'function'\
\n\t\tdone()\
\n\t\treturn\
\n\n\tdescribe '\'/$(NAME_CAMELIZED)\' route', ->\
\n\n\t\tit 'should return a 200 status code.', (done) ->\
\n\t\t\trequest.get 'http://localhost:3000/$(NAME_CAMELIZED)', (error, response, body) ->\
\n\t\t\t\tresponse.statusCode.should.eql 200\
\n\t\t\t\tshould.not.exist error\
\n\t\t\t\tshould.not.exist body\
\n\t\t\t\tdone()\
\n\t\t\treturn\
\n\n\tafter (done) ->\
\n\t\tapp.close()\
\n\t\tdone()\
\n\t\treturn"

MIDDLEWARE_CS = "\#example = require 'example'\
\n\n$(NAME_FUNCTIONALIZED) = module.exports = (request, response, next) ->\
\n\tapp = request.app\
\n\n\t\# ... your code goes in here ...\
\n\n\tnext()\
\n\treturn"

ifeq "$(APP)" ""
TESTMIDDLEWARE_CS = "describe 'Middleware > $(NAME)', ->\
\n\t$(NAME_FUNCTIONALIZED) = require '../../$(SOURCE_DIRECTORY)/$(MIDDLEWARES_DIRECTORY)/$(NAME_CAMELIZED)'"
else
TESTMIDDLEWARE_CS = "describe '$(APP) > Middleware > $(NAME)', ->\
\n\t$(NAME_FUNCTIONALIZED) = require '../../../../$(SOURCE_DIRECTORY)/$(APPS_DIRECTORY)/$(APP_CAMELIZED)/$(MIDDLEWARES_DIRECTORY)/$(NAME_CAMELIZED)'"
endif

TESTMIDDLEWARE_CS += "\n\tapp = require('express').createServer()\
\n\thttp = require 'http'\
\n\n\tapp.configure ->\
\n\t\tapp.use $(NAME_FUNCTIONALIZED)\
\n\t\treturn\
\n\n\tapp.get '/', (request, response) ->\
\n\t\tresponse.end()\
\n\t\treturn\
\n\n\tbefore (done) ->\
\n\t\tapp.listen 3000\
\n\t\tdone()\
\n\t\treturn\
\n\n\tit 'should exist', (done) ->\
\n\t\tapp.stack[1]['handle'].name.should.eql($(NAME_FUNCTIONALIZED).name)\
\n\t\tdone()\
\n\t\treturn\
\n\n\tafter (done) ->\
\n\t\tapp.close()\
\n\t\tdone()\
\n\t\treturn"

MODULE_CS = "module.exports = {\
\n\t\#example = 0\
\n\n\tmethod1: ->\
\n\t\t\# ... your code goes in here ...\
\n\n\tmethod2: ->\
\n\t\t\# ... your code goes in here ...\
\n}"

ifeq "$(APP)" ""
TESTMODULE_CS = "describe 'Module > $(NAME)', ->\
\n\t$(NAME_CAMELIZED) = require '../../$(SOURCE_DIRECTORY)/$(MODULES_DIRECTORY)/$(NAME_CAMELIZED)'"
else
TESTMODULE_CS = "describe '$(APP) > Module > $(NAME)', ->\
\n\t$(NAME_CAMELIZED) = require '../../../../$(SOURCE_DIRECTORY)/$(APPS_DIRECTORY)/$(APP_CAMELIZED)/$(MODULES_DIRECTORY)/$(NAME_CAMELIZED)'"
endif

TESTMODULE_CS += "\n\n\tdescribe '\#example', ->\
\n\t\tit 'should not exist', (done) ->\
\n\t\t\t$(NAME_CAMELIZED).should.not.have.property 'example'\
\n\t\t\tdone()\
\n\t\t\treturn\
\n\n\tdescribe '\#method1()', ->\
\n\t\tit 'should exist', (done) ->\
\n\t\t\t$(NAME_CAMELIZED).should.have.property 'method1'\
\n\t\t\tdone()\
\n\t\t\treturn\
\n\n\tdescribe '\#method2()', ->\
\n\t\tit 'should exist', (done) ->\
\n\t\t\t$(NAME_CAMELIZED).should.have.property 'method2'\
\n\t\t\tdone()\
\n\t\t\treturn"

HELPER_CS = "module.exports = {\
\n\t\#example = 0\
\n\n\tmethod1: ->\
\n\t\t\# ... your code goes in here ...\
\n\n\tmethod2: ->\
\n\t\t\# ... your code goes in here ...\
\n}"

ifeq "$(APP)" ""
TESTHELPER_CS = "describe 'Helper > $(NAME)', ->\
\n\t$(NAME_CAMELIZED) = require '../../$(SOURCE_DIRECTORY)/$(HELPERS_DIRECTORY)/$(NAME_CAMELIZED)'"
else
TESTHELPER_CS = "describe '$(APP) > Helper > $(NAME)', ->\
\n\t$(NAME_CAMELIZED) = require '../../../../$(SOURCE_DIRECTORY)/$(APPS_DIRECTORY)/$(APP_CAMELIZED)/$(HELPERS_DIRECTORY)/$(NAME_CAMELIZED)'"
endif

TESTHELPER_CS += "\n\n\tdescribe '\#example', ->\
\n\t\tit 'should not exist', (done) ->\
\n\t\t\t$(NAME_CAMELIZED).should.not.have.property 'example'\
\n\t\t\tdone()\
\n\t\t\treturn\
\n\n\tdescribe '\#method1()', ->\
\n\t\tit 'should exist', (done) ->\
\n\t\t\t$(NAME_CAMELIZED).should.have.property 'method1'\
\n\t\t\tdone()\
\n\t\t\treturn\
\n\n\tdescribe '\#method2()', ->\
\n\t\tit 'should exist', (done) ->\
\n\t\t\t$(NAME_CAMELIZED).should.have.property 'method2'\
\n\t\t\tdone()\
\n\t\t\treturn"

ROUTE_CS = "\#example = require 'example'\
\n\nmodule.exports = (app) ->\
\n\tapp.all '/$(NAME_CAMELIZED)(/*)?', (request, response, next) ->\
\n\t\t\# ... your code goes in here ...\
\n\t\tnext()\
\n\t\treturn\
\n\n\tapp.get '/$(NAME_CAMELIZED)/?', (request, response) ->\
\n\t\t\# ... your code goes in here ...\
\n\t\t\# options = {\
\n\t\t\#\t layout: 'layout',\
\n\t\t\#\t locals: {\
\n\t\t\#\t\t foo: 'bar'\
\n\t\t\#\t }\
\n\t\t\# }\
\n\t\t\# response.render 'group/view', options\
\n\n\t\tresponse.end()\
\n\t\treturn\
\n\n\tapp.post '/$(NAME_CAMELIZED)', (request, response) ->\
\n\t\t\# ... your code goes in here ...\
\n\t\t\# options = {\
\n\t\t\#\t layout: 'layout',\
\n\t\t\#\t locals: {\
\n\t\t\#\t\t foo: 'bar'\
\n\t\t\#\t }\
\n\t\t\# }\
\n\t\t\# response.render 'group/view', options\
\n\n\t\tresponse.end()\
\n\t\treturn\
\n\n\tapp.put '/$(NAME_CAMELIZED)', (request, response) ->\
\n\t\t\# ... your code goes in here ...\
\n\t\t\# options = {\
\n\t\t\#\t layout: 'layout',\
\n\t\t\#\t locals: {\
\n\t\t\#\t\t foo: 'bar'\
\n\t\t\#\t }\
\n\t\t\# }\
\n\t\t\# response.render 'group/view', options\
\n\n\t\tresponse.end()\
\n\t\treturn\
\n\n\tapp.del '/$(NAME_CAMELIZED)', (request, response) ->\
\n\t\t\# ... your code goes in here ...\
\n\t\t\# options = {\
\n\t\t\#\t layout: 'layout',\
\n\t\t\#\t locals: {\
\n\t\t\#\t\t foo: 'bar'\
\n\t\t\#\t }\
\n\t\t\# }\
\n\t\t\# response.render 'group/view', options\
\n\n\t\tresponse.end()\
\n\t\treturn"

ifeq "$(APP)" ""
TESTROUTE_CS = "describe 'Route > $(NAME)', ->\
\n\tapp = require('express').createServer()\
\n\trequest = require 'request'\
\n\n\trequire('../../$(SOURCE_DIRECTORY)/$(ROUTES_DIRECTORY)/$(NAME_CAMELIZED)')(app)"
else
TESTROUTE_CS = "describe '$(APP) > Route > $(NAME)', ->\
\n\tapp = require('express').createServer()\
\n\trequest = require 'request'\
\n\n\trequire('../../../../$(SOURCE_DIRECTORY)/$(APPS_DIRECTORY)/$(APP_CAMELIZED)/$(ROUTES_DIRECTORY)/$(NAME_CAMELIZED)')(app)"
endif

TESTROUTE_CS += "\n\n\tbefore (done) ->\
\n\t\tapp.listen 3000\
\n\t\tdone()\
\n\t\treturn\
\n\n\tdescribe '\#get()', ->\
\n\t\tit '\'/$(NAME_CAMELIZED)\' route should exist', (done) ->\
\n\t\t\trequest.get 'http://localhost:3000/$(NAME_CAMELIZED)', (error, response, body) ->\
\n\t\t\t\tresponse.statusCode.should.eql 200\
\n\t\t\t\tdone()\
\n\t\t\t\treturn\
\n\t\tit '\'/$(NAME_CAMELIZED)/\' route should exist', (done) ->\
\n\t\t\trequest.get 'http://localhost:3000/$(NAME_CAMELIZED)/', (error, response, body) ->\
\n\t\t\t\tresponse.statusCode.should.eql 200\
\n\t\t\t\tdone()\
\n\t\t\t\treturn\
\n\n\t\tit '\'/$(NAME_CAMELIZED)/xxx/\' route should not exist', (done) ->\
\n\t\t\trequest.get 'http://localhost:3000/$(NAME_CAMELIZED)/xxx/', (error, response, body) ->\
\n\t\t\t\tresponse.statusCode.should.eql 404\
\n\t\t\t\tdone()\
\n\t\t\t\treturn\
\n\n\t\tit '\'/testing\' route should not exist', (done) ->\
\n\t\t\trequest.get 'http://localhost:3000/testing', (error, response, body) ->\
\n\t\t\t\tresponse.statusCode.should.eql 404\
\n\t\t\t\tdone()\
\n\t\t\t\treturn\
\n\n\tdescribe '\#post()', ->\
\n\t\tit '\'/$(NAME_CAMELIZED)\' route should exist', (done) ->\
\n\t\t\trequest.post 'http://localhost:3000/$(NAME_CAMELIZED)', (error, response, body) ->\
\n\t\t\t\tresponse.statusCode.should.eql 200\
\n\t\t\t\tdone()\
\n\t\t\t\treturn\
\n\t\tit '\'/$(NAME_CAMELIZED)/\' route should exist', (done) ->\
\n\t\t\trequest.post 'http://localhost:3000/$(NAME_CAMELIZED)/', (error, response, body) ->\
\n\t\t\t\tresponse.statusCode.should.eql 200\
\n\t\t\t\tdone()\
\n\t\t\t\treturn\
\n\n\t\tit '\'/$(NAME_CAMELIZED)/xxx/\' route should not exist', (done) ->\
\n\t\t\trequest.post 'http://localhost:3000/$(NAME_CAMELIZED)/xxx/', (error, response, body) ->\
\n\t\t\t\tresponse.statusCode.should.eql 404\
\n\t\t\t\tdone()\
\n\t\t\t\treturn\
\n\n\t\tit '\'/testing\' route should not exist', (done) ->\
\n\t\t\trequest.post 'http://localhost:3000/testing', (error, response, body) ->\
\n\t\t\t\tresponse.statusCode.should.eql 404\
\n\t\t\t\tdone()\
\n\t\t\t\treturn\
\n\n\tdescribe '\#put()', ->\
\n\t\tit '\'/$(NAME_CAMELIZED)\' route should exist', (done) ->\
\n\t\t\trequest.put 'http://localhost:3000/$(NAME_CAMELIZED)', (error, response, body) ->\
\n\t\t\t\tresponse.statusCode.should.eql 200\
\n\t\t\t\tdone()\
\n\t\t\t\treturn\
\n\t\tit '\'/$(NAME_CAMELIZED)/\' route should exist', (done) ->\
\n\t\t\trequest.put 'http://localhost:3000/$(NAME_CAMELIZED)/', (error, response, body) ->\
\n\t\t\t\tresponse.statusCode.should.eql 200\
\n\t\t\t\tdone()\
\n\t\t\t\treturn\
\n\n\t\tit '\'/$(NAME_CAMELIZED)/xxx/\' route should not exist', (done) ->\
\n\t\t\trequest.put 'http://localhost:3000/$(NAME_CAMELIZED)/xxx/', (error, response, body) ->\
\n\t\t\t\tresponse.statusCode.should.eql 404\
\n\t\t\t\tdone()\
\n\t\t\t\treturn\
\n\n\t\tit '\'/testing\' route should not exist', (done) ->\
\n\t\t\trequest.put 'http://localhost:3000/testing', (error, response, body) ->\
\n\t\t\t\tresponse.statusCode.should.eql 404\
\n\t\t\t\tdone()\
\n\t\t\t\treturn\
\n\n\tdescribe '\#del()', ->\
\n\t\tit '\'/$(NAME_CAMELIZED)\' route should exist', (done) ->\
\n\t\t\trequest.del 'http://localhost:3000/$(NAME_CAMELIZED)', (error, response, body) ->\
\n\t\t\t\tresponse.statusCode.should.eql 200\
\n\t\t\t\tdone()\
\n\t\t\t\treturn\
\n\t\tit '\'/$(NAME_CAMELIZED)/\' route should exist', (done) ->\
\n\t\t\trequest.del 'http://localhost:3000/$(NAME_CAMELIZED)/', (error, response, body) ->\
\n\t\t\t\tresponse.statusCode.should.eql 200\
\n\t\t\t\tdone()\
\n\t\t\t\treturn\
\n\n\t\tit '\'/$(NAME_CAMELIZED)/xxx/\' route should not exist', (done) ->\
\n\t\t\trequest.del 'http://localhost:3000/$(NAME_CAMELIZED)/xxx/', (error, response, body) ->\
\n\t\t\t\tresponse.statusCode.should.eql 404\
\n\t\t\t\tdone()\
\n\t\t\t\treturn\
\n\n\t\tit '\'/testing\' route should not exist', (done) ->\
\n\t\t\trequest.del 'http://localhost:3000/testing', (error, response, body) ->\
\n\t\t\t\tresponse.statusCode.should.eql 404\
\n\t\t\t\tdone()\
\n\t\t\t\treturn\
\n\n\tafter (done) ->\
\n\t\tapp.close()\
\n\t\tdone()\
\n\t\treturn"

CONTROLLER_CS = "\#Example = require 'example'\
\n\n$(NAME) = exports = module.exports = ->\
\n\t\#model = new Example()"

ifeq "$(WITH_VIEWS)" "YES"
CONTROLLER_CS += "\n\n\tindex: (request, response) ->\
\n\t\t\# ... your code goes in here ...\
\n\n\t\toptions = {\
\n\t\t\tlayout: 'layout',\
\n\t\t\tlocals: {\
\n\t\t\t\tfoo: 'bar'\
\n\t\t\t}\
\n\t\t};\
\n\n\t\tresponse.render '$(GROUP_CAMELIZED)/index', options\
\n\t\treturn\
\n\n\tshow: (request, response, next) ->\
\n\t\t\# ... your code goes in here ...\
\n\n\t\toptions = {\
\n\t\t\tlayout: 'layout',\
\n\t\t\tlocals: {\
\n\t\t\t\tfoo: 'bar'\
\n\t\t\t}\
\n\t\t};\
\n\n\t\tresponse.render '$(GROUP_CAMELIZED)/show', options\
\n\t\treturn\
\n\n\tedit: (request, response, next) ->\
\n\t\t\# ... your code goes in here ...\
\n\n\t\toptions = {\
\n\t\t\tlayout: 'layout',\
\n\t\t\tlocals: {\
\n\t\t\t\tfoo: 'bar'\
\n\t\t\t}\
\n\t\t};\
\n\n\t\tresponse.render '$(GROUP_CAMELIZED)/edit', options\
\n\t\treturn\
\n\n\tupdate: (request, response, next) ->\
\n\t\t\# ... your code goes in here ...\
\n\n\t\toptions = {\
\n\t\t\tlayout: 'layout',\
\n\t\t\tlocals: {\
\n\t\t\t\tfoo: 'bar'\
\n\t\t\t}\
\n\t\t};\
\n\n\t\tresponse.render '$(GROUP_CAMELIZED)/update', options\
\n\t\treturn\
\n\n\tremove: (request, response, next) ->\
\n\t\t\# ... your code goes in here ...\
\n\n\t\toptions = {\
\n\t\t\tlayout: 'layout',\
\n\t\t\tlocals: {\
\n\t\t\t\tfoo: 'bar'\
\n\t\t\t}\
\n\t\t};\
\n\n\t\tresponse.render '$(GROUP_CAMELIZED)/remove', options\
\n\t\treturn"
else
CONTROLLER_CS += "\n\n\tindex: (request, response) ->\
\n\t\t\# ... your code goes in here ...\
\n\n\t\treturn\
\n\n\tshow: (request, response, next) ->\
\n\t\t\# ... your code goes in here ...\
\n\n\t\treturn\
\n\n\tedit: (request, response, next) ->\
\n\t\t\# ... your code goes in here ...\
\n\n\t\treturn\
\n\n\tupdate: (request, response, next) ->\
\n\t\t\# ... your code goes in here ...\
\n\n\t\treturn\
\n\n\tremove: (request, response, next) ->\
\n\t\t\# ... your code goes in here ...\
\n\n\t\treturn"
endif

ifeq "$(APP)" ""
TESTCONTROLLER_CS = "describe 'Controller > $(NAME)', ->\
\n\t$(NAME) = require '../../$(SOURCE_DIRECTORY)/$(CONTROLLERS_DIRECTORY)/$(NAME_CAMELIZED)'"
else
TESTCONTROLLER_CS = "describe '$(APP) > Controller > $(NAME)', ->\
\n\t$(NAME) = require '../../../../$(SOURCE_DIRECTORY)/$(APPS_DIRECTORY)/$(APP_CAMELIZED)//$(CONTROLLERS_DIRECTORY)/$(NAME_CAMELIZED)'"
endif

TESTCONTROLLER_CS += "\n\tcontroller = new $(NAME)()\
\n\n\tdescribe '\#model', ->\
\n\t\tit 'should not exist', (done) ->\
\n\t\t\tcontroller.should.not.have.property 'model'\
\n\t\t\tdone()\
\n\t\t\treturn\
\n\n\tdescribe '\#index()', ->\
\n\t\tit 'should exist', (done) ->\
\n\t\t\tcontroller.should.have.property 'index'\
\n\t\t\tdone()\
\n\t\t\treturn\
\n\n\tdescribe '\#show()', ->\
\n\t\tit 'should exist', (done) ->\
\n\t\t\tcontroller.should.have.property 'show'\
\n\t\t\tdone()\
\n\t\t\treturn\
\n\n\tdescribe '\#edit()', ->\
\n\t\tit 'should exist', (done) ->\
\n\t\t\tcontroller.should.have.property 'edit'\
\n\t\t\tdone()\
\n\t\t\treturn\
\n\n\tdescribe '\#update()', ->\
\n\t\tit 'should exist', (done) ->\
\n\t\t\tcontroller.should.have.property 'update'\
\n\t\t\tdone()\
\n\t\t\treturn\
\n\n\tdescribe '\#remove()', ->\
\n\t\tit 'should exist', (done) ->\
\n\t\t\tcontroller.should.have.property 'remove'\
\n\t\t\tdone()\
\n\t\t\treturn"

MODEL_CS = "$(NAME) = exports = module.exports = ->\
\n\tcounter = -1\
\n\n\tindex: 0\
\n\n\tmethod1: ->\
\n\t\t'\#method1()'\
\n\n\tmethod2: (text) ->\
\n\t\ttext"

ifeq "$(APP)" ""
TESTMODEL_CS = "describe 'Model > $(NAME)', ->\
\n\t$(NAME) = require '../../$(SOURCE_DIRECTORY)/$(MODELS_DIRECTORY)/$(NAME_CAMELIZED)'"
else
TESTMODEL_CS = "describe '$(APP) > Model > $(NAME)', ->\
\n\t$(NAME) = require '../../../../$(SOURCE_DIRECTORY)/$(APPS_DIRECTORY)/$(APP_CAMELIZED)/$(MODELS_DIRECTORY)/$(NAME_CAMELIZED)'"
endif

TESTMODEL_CS += "\n\tinstance = new $(NAME)()\
\n\n\tdescribe '\#counter', ->\
\n\t\tit 'should not exist', (done) ->\
\n\t\t\tinstance.should.not.have.property 'counter'\
\n\t\t\tdone()\
\n\t\t\treturn\
\n\n\tdescribe '\#index', ->\
\n\t\tit 'should exist', (done) ->\
\n\t\t\tinstance.should.have.property 'index'\
\n\t\t\tdone()\
\n\t\t\treturn\
\n\n\t\tit 'should equal 0', (done) ->\
\n\t\t\tinstance.index.should.eql 0\
\n\t\t\tdone()\
\n\t\t\treturn\
\n\n\tdescribe '\#method1()', ->\
\n\t\tit 'should exist', (done) ->\
\n\t\t\tinstance.should.have.property 'method1'\
\n\t\t\tdone()\
\n\t\t\treturn\
\n\n\t\tit 'should return a predefined text', (done) ->\
\n\t\t\tinstance.method1().should.eql '\#method1()'\
\n\t\t\tdone()\
\n\t\t\treturn\
\n\n\tdescribe '\#method2()', ->\
\n\t\tit 'should exist', (done) ->\
\n\t\t\tinstance.should.have.property 'method2'\
\n\t\t\tdone()\
\n\t\t\treturn\
\n\n\t\tit 'should equal 0', (done) ->\
\n\t\t\tinstance.method2('text').should.eql 'text'\
\n\t\t\tdone()\
\n\t\t\treturn"
